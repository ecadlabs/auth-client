// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User User
// swagger:model User
type User struct {

	// account type
	// Required: true
	AccountType *string `json:"account_type"`

	// added
	// Required: true
	// Format: date-time
	Added *strfmt.DateTime `json:"added"`

	// address whitelist
	AddressWhitelist map[string]bool `json:"address_whitelist,omitempty"`

	// email
	// Required: true
	Email *string `json:"email"`

	// email verified
	// Required: true
	EmailVerified *bool `json:"email_verified"`

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// login addr
	LoginAddr string `json:"login_addr,omitempty"`

	// login ts
	// Format: date-time
	LoginTs strfmt.DateTime `json:"login_ts,omitempty"`

	// modified
	// Required: true
	// Format: date-time
	Modified *strfmt.DateTime `json:"modified"`

	// name
	Name string `json:"name,omitempty"`

	// refresh addr
	RefreshAddr string `json:"refresh_addr,omitempty"`

	// refresh ts
	// Format: date-time
	RefreshTs strfmt.DateTime `json:"refresh_ts,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailVerified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginTs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshTs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateAccountType(formats strfmt.Registry) error {

	if err := validate.Required("account_type", "body", m.AccountType); err != nil {
		return err
	}

	return nil
}

func (m *User) validateAdded(formats strfmt.Registry) error {

	if err := validate.Required("added", "body", m.Added); err != nil {
		return err
	}

	if err := validate.FormatOf("added", "body", "date-time", m.Added.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEmailVerified(formats strfmt.Registry) error {

	if err := validate.Required("email_verified", "body", m.EmailVerified); err != nil {
		return err
	}

	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLoginTs(formats strfmt.Registry) error {

	if swag.IsZero(m.LoginTs) { // not required
		return nil
	}

	if err := validate.FormatOf("login_ts", "body", "date-time", m.LoginTs.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateModified(formats strfmt.Registry) error {

	if err := validate.Required("modified", "body", m.Modified); err != nil {
		return err
	}

	if err := validate.FormatOf("modified", "body", "date-time", m.Modified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateRefreshTs(formats strfmt.Registry) error {

	if swag.IsZero(m.RefreshTs) { // not required
		return nil
	}

	if err := validate.FormatOf("refresh_ts", "body", "date-time", m.RefreshTs.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
