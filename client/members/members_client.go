// Code generated by go-swagger; DO NOT EDIT.

package members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new members API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for members API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
MembersUserByMemberIDGet gets user from membership

Get user from membership
*/
func (a *Client) MembersUserByMemberIDGet(params *MembersUserByMemberIDGetParams) (*MembersUserByMemberIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMembersUserByMemberIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MembersUserByMemberIdGet",
		Method:             "GET",
		PathPattern:        "/members/{memberId}/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MembersUserByMemberIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MembersUserByMemberIDGetOK), nil

}

/*
TenantsMembersByIDGet gets tenant members

Get list of members
*/
func (a *Client) TenantsMembersByIDGet(params *TenantsMembersByIDGetParams) (*TenantsMembersByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenantsMembersByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TenantsMembersByIdGet",
		Method:             "GET",
		PathPattern:        "/tenants/{id}/members/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TenantsMembersByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TenantsMembersByIDGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
