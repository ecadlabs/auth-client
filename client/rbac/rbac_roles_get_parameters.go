// Code generated by go-swagger; DO NOT EDIT.

package rbac

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRbacRolesGetParams creates a new RbacRolesGetParams object
// with the default values initialized.
func NewRbacRolesGetParams() *RbacRolesGetParams {
	var ()
	return &RbacRolesGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRbacRolesGetParamsWithTimeout creates a new RbacRolesGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRbacRolesGetParamsWithTimeout(timeout time.Duration) *RbacRolesGetParams {
	var ()
	return &RbacRolesGetParams{

		timeout: timeout,
	}
}

// NewRbacRolesGetParamsWithContext creates a new RbacRolesGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewRbacRolesGetParamsWithContext(ctx context.Context) *RbacRolesGetParams {
	var ()
	return &RbacRolesGetParams{

		Context: ctx,
	}
}

// NewRbacRolesGetParamsWithHTTPClient creates a new RbacRolesGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRbacRolesGetParamsWithHTTPClient(client *http.Client) *RbacRolesGetParams {
	var ()
	return &RbacRolesGetParams{
		HTTPClient: client,
	}
}

/*RbacRolesGetParams contains all the parameters to send to the API endpoint
for the rbac roles get operation typically these are written to a http.Request
*/
type RbacRolesGetParams struct {

	/*Perm
	  Filter by permission

	*/
	Perm []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the rbac roles get params
func (o *RbacRolesGetParams) WithTimeout(timeout time.Duration) *RbacRolesGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the rbac roles get params
func (o *RbacRolesGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the rbac roles get params
func (o *RbacRolesGetParams) WithContext(ctx context.Context) *RbacRolesGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the rbac roles get params
func (o *RbacRolesGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the rbac roles get params
func (o *RbacRolesGetParams) WithHTTPClient(client *http.Client) *RbacRolesGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the rbac roles get params
func (o *RbacRolesGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPerm adds the perm to the rbac roles get params
func (o *RbacRolesGetParams) WithPerm(perm []string) *RbacRolesGetParams {
	o.SetPerm(perm)
	return o
}

// SetPerm adds the perm to the rbac roles get params
func (o *RbacRolesGetParams) SetPerm(perm []string) {
	o.Perm = perm
}

// WriteToRequest writes these params to a swagger request
func (o *RbacRolesGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesPerm := o.Perm

	joinedPerm := swag.JoinByFormat(valuesPerm, "")
	// query array param perm
	if err := r.SetQueryParam("perm", joinedPerm...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
