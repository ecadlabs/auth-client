// Code generated by go-swagger; DO NOT EDIT.

package rbac

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new rbac API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rbac API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
RbacPermissionsByNameGet gets permission

Get permission info
*/
func (a *Client) RbacPermissionsByNameGet(params *RbacPermissionsByNameGetParams) (*RbacPermissionsByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRbacPermissionsByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RbacPermissionsByNameGet",
		Method:             "GET",
		PathPattern:        "/rbac/permissions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RbacPermissionsByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RbacPermissionsByNameGetOK), nil

}

/*
RbacPermissionsGet gets permissions

Get permissions list
*/
func (a *Client) RbacPermissionsGet(params *RbacPermissionsGetParams) (*RbacPermissionsGetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRbacPermissionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RbacPermissionsGet",
		Method:             "GET",
		PathPattern:        "/rbac/permissions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RbacPermissionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RbacPermissionsGetNoContent), nil

}

/*
RbacRolesByNameGet gets role

Get role info
*/
func (a *Client) RbacRolesByNameGet(params *RbacRolesByNameGetParams) (*RbacRolesByNameGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRbacRolesByNameGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RbacRolesByNameGet",
		Method:             "GET",
		PathPattern:        "/rbac/roles/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RbacRolesByNameGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RbacRolesByNameGetOK), nil

}

/*
RbacRolesGet gets roles

Get roles list
*/
func (a *Client) RbacRolesGet(params *RbacRolesGetParams) (*RbacRolesGetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRbacRolesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RbacRolesGet",
		Method:             "GET",
		PathPattern:        "/rbac/roles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RbacRolesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RbacRolesGetNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
