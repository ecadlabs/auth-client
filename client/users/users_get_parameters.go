// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUsersGetParams creates a new UsersGetParams object
// with the default values initialized.
func NewUsersGetParams() *UsersGetParams {
	var (
		countDefault = bool(false)
		limitDefault = int32(20)
		orderDefault = string("asc")
	)
	return &UsersGetParams{
		Count: &countDefault,
		Limit: &limitDefault,
		Order: &orderDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewUsersGetParamsWithTimeout creates a new UsersGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUsersGetParamsWithTimeout(timeout time.Duration) *UsersGetParams {
	var (
		countDefault = bool(false)
		limitDefault = int32(20)
		orderDefault = string("asc")
	)
	return &UsersGetParams{
		Count: &countDefault,
		Limit: &limitDefault,
		Order: &orderDefault,

		timeout: timeout,
	}
}

// NewUsersGetParamsWithContext creates a new UsersGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewUsersGetParamsWithContext(ctx context.Context) *UsersGetParams {
	var (
		countDefault = bool(false)
		limitDefault = int32(20)
		orderDefault = string("asc")
	)
	return &UsersGetParams{
		Count: &countDefault,
		Limit: &limitDefault,
		Order: &orderDefault,

		Context: ctx,
	}
}

// NewUsersGetParamsWithHTTPClient creates a new UsersGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUsersGetParamsWithHTTPClient(client *http.Client) *UsersGetParams {
	var (
		countDefault = bool(false)
		limitDefault = int32(20)
		orderDefault = string("asc")
	)
	return &UsersGetParams{
		Count:      &countDefault,
		Limit:      &limitDefault,
		Order:      &orderDefault,
		HTTPClient: client,
	}
}

/*UsersGetParams contains all the parameters to send to the API endpoint
for the users get operation typically these are written to a http.Request
*/
type UsersGetParams struct {

	/*Added
	  Query on time of user ceration

	*/
	Added *string
	/*Count
	  Return total count

	*/
	Count *bool
	/*Email
	  Query on users email address

	*/
	Email *string
	/*EmailVerified
	  Query on email verifiation status of user

	*/
	EmailVerified *string
	/*ID
	  Query by unique user ID

	*/
	ID *string
	/*Last
	  Previews page last item's sorting field value

	*/
	Last *string
	/*LastID
	  Previews page last item's UID

	*/
	LastID *strfmt.UUID
	/*Limit
	  Page limit

	*/
	Limit *int32
	/*LoginAddr
	  Query on last login source address of user

	*/
	LoginAddr *string
	/*LoginTs
	  Query on last login timestamp of user

	*/
	LoginTs *string
	/*Modified
	  Query on time of last modifcation

	*/
	Modified *string
	/*Name
	  Query on users natural name

	*/
	Name *string
	/*Order
	  Sort order

	*/
	Order *string
	/*RefreshAddr
	  Query on last token refreshing source address of user

	*/
	RefreshAddr *string
	/*RefreshTs
	  Query on last token refreshing timestamp of user

	*/
	RefreshTs *string
	/*Roles
	  Query based on roles assigned to user

	*/
	Roles *string
	/*SortBy
	  Sort by field

	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the users get params
func (o *UsersGetParams) WithTimeout(timeout time.Duration) *UsersGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the users get params
func (o *UsersGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the users get params
func (o *UsersGetParams) WithContext(ctx context.Context) *UsersGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the users get params
func (o *UsersGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the users get params
func (o *UsersGetParams) WithHTTPClient(client *http.Client) *UsersGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the users get params
func (o *UsersGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAdded adds the added to the users get params
func (o *UsersGetParams) WithAdded(added *string) *UsersGetParams {
	o.SetAdded(added)
	return o
}

// SetAdded adds the added to the users get params
func (o *UsersGetParams) SetAdded(added *string) {
	o.Added = added
}

// WithCount adds the count to the users get params
func (o *UsersGetParams) WithCount(count *bool) *UsersGetParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the users get params
func (o *UsersGetParams) SetCount(count *bool) {
	o.Count = count
}

// WithEmail adds the email to the users get params
func (o *UsersGetParams) WithEmail(email *string) *UsersGetParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the users get params
func (o *UsersGetParams) SetEmail(email *string) {
	o.Email = email
}

// WithEmailVerified adds the emailVerified to the users get params
func (o *UsersGetParams) WithEmailVerified(emailVerified *string) *UsersGetParams {
	o.SetEmailVerified(emailVerified)
	return o
}

// SetEmailVerified adds the emailVerified to the users get params
func (o *UsersGetParams) SetEmailVerified(emailVerified *string) {
	o.EmailVerified = emailVerified
}

// WithID adds the id to the users get params
func (o *UsersGetParams) WithID(id *string) *UsersGetParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the users get params
func (o *UsersGetParams) SetID(id *string) {
	o.ID = id
}

// WithLast adds the last to the users get params
func (o *UsersGetParams) WithLast(last *string) *UsersGetParams {
	o.SetLast(last)
	return o
}

// SetLast adds the last to the users get params
func (o *UsersGetParams) SetLast(last *string) {
	o.Last = last
}

// WithLastID adds the lastID to the users get params
func (o *UsersGetParams) WithLastID(lastID *strfmt.UUID) *UsersGetParams {
	o.SetLastID(lastID)
	return o
}

// SetLastID adds the lastId to the users get params
func (o *UsersGetParams) SetLastID(lastID *strfmt.UUID) {
	o.LastID = lastID
}

// WithLimit adds the limit to the users get params
func (o *UsersGetParams) WithLimit(limit *int32) *UsersGetParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the users get params
func (o *UsersGetParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithLoginAddr adds the loginAddr to the users get params
func (o *UsersGetParams) WithLoginAddr(loginAddr *string) *UsersGetParams {
	o.SetLoginAddr(loginAddr)
	return o
}

// SetLoginAddr adds the loginAddr to the users get params
func (o *UsersGetParams) SetLoginAddr(loginAddr *string) {
	o.LoginAddr = loginAddr
}

// WithLoginTs adds the loginTs to the users get params
func (o *UsersGetParams) WithLoginTs(loginTs *string) *UsersGetParams {
	o.SetLoginTs(loginTs)
	return o
}

// SetLoginTs adds the loginTs to the users get params
func (o *UsersGetParams) SetLoginTs(loginTs *string) {
	o.LoginTs = loginTs
}

// WithModified adds the modified to the users get params
func (o *UsersGetParams) WithModified(modified *string) *UsersGetParams {
	o.SetModified(modified)
	return o
}

// SetModified adds the modified to the users get params
func (o *UsersGetParams) SetModified(modified *string) {
	o.Modified = modified
}

// WithName adds the name to the users get params
func (o *UsersGetParams) WithName(name *string) *UsersGetParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the users get params
func (o *UsersGetParams) SetName(name *string) {
	o.Name = name
}

// WithOrder adds the order to the users get params
func (o *UsersGetParams) WithOrder(order *string) *UsersGetParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the users get params
func (o *UsersGetParams) SetOrder(order *string) {
	o.Order = order
}

// WithRefreshAddr adds the refreshAddr to the users get params
func (o *UsersGetParams) WithRefreshAddr(refreshAddr *string) *UsersGetParams {
	o.SetRefreshAddr(refreshAddr)
	return o
}

// SetRefreshAddr adds the refreshAddr to the users get params
func (o *UsersGetParams) SetRefreshAddr(refreshAddr *string) {
	o.RefreshAddr = refreshAddr
}

// WithRefreshTs adds the refreshTs to the users get params
func (o *UsersGetParams) WithRefreshTs(refreshTs *string) *UsersGetParams {
	o.SetRefreshTs(refreshTs)
	return o
}

// SetRefreshTs adds the refreshTs to the users get params
func (o *UsersGetParams) SetRefreshTs(refreshTs *string) {
	o.RefreshTs = refreshTs
}

// WithRoles adds the roles to the users get params
func (o *UsersGetParams) WithRoles(roles *string) *UsersGetParams {
	o.SetRoles(roles)
	return o
}

// SetRoles adds the roles to the users get params
func (o *UsersGetParams) SetRoles(roles *string) {
	o.Roles = roles
}

// WithSortBy adds the sortBy to the users get params
func (o *UsersGetParams) WithSortBy(sortBy *string) *UsersGetParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the users get params
func (o *UsersGetParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *UsersGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Added != nil {

		// query param added
		var qrAdded string
		if o.Added != nil {
			qrAdded = *o.Added
		}
		qAdded := qrAdded
		if qAdded != "" {
			if err := r.SetQueryParam("added", qAdded); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount bool
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatBool(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Email != nil {

		// query param email
		var qrEmail string
		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {
			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}

	}

	if o.EmailVerified != nil {

		// query param email_verified
		var qrEmailVerified string
		if o.EmailVerified != nil {
			qrEmailVerified = *o.EmailVerified
		}
		qEmailVerified := qrEmailVerified
		if qEmailVerified != "" {
			if err := r.SetQueryParam("email_verified", qEmailVerified); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Last != nil {

		// query param last
		var qrLast string
		if o.Last != nil {
			qrLast = *o.Last
		}
		qLast := qrLast
		if qLast != "" {
			if err := r.SetQueryParam("last", qLast); err != nil {
				return err
			}
		}

	}

	if o.LastID != nil {

		// query param lastId
		var qrLastID strfmt.UUID
		if o.LastID != nil {
			qrLastID = *o.LastID
		}
		qLastID := qrLastID.String()
		if qLastID != "" {
			if err := r.SetQueryParam("lastId", qLastID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.LoginAddr != nil {

		// query param login_addr
		var qrLoginAddr string
		if o.LoginAddr != nil {
			qrLoginAddr = *o.LoginAddr
		}
		qLoginAddr := qrLoginAddr
		if qLoginAddr != "" {
			if err := r.SetQueryParam("login_addr", qLoginAddr); err != nil {
				return err
			}
		}

	}

	if o.LoginTs != nil {

		// query param login_ts
		var qrLoginTs string
		if o.LoginTs != nil {
			qrLoginTs = *o.LoginTs
		}
		qLoginTs := qrLoginTs
		if qLoginTs != "" {
			if err := r.SetQueryParam("login_ts", qLoginTs); err != nil {
				return err
			}
		}

	}

	if o.Modified != nil {

		// query param modified
		var qrModified string
		if o.Modified != nil {
			qrModified = *o.Modified
		}
		qModified := qrModified
		if qModified != "" {
			if err := r.SetQueryParam("modified", qModified); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Order != nil {

		// query param order
		var qrOrder string
		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {
			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}

	}

	if o.RefreshAddr != nil {

		// query param refresh_addr
		var qrRefreshAddr string
		if o.RefreshAddr != nil {
			qrRefreshAddr = *o.RefreshAddr
		}
		qRefreshAddr := qrRefreshAddr
		if qRefreshAddr != "" {
			if err := r.SetQueryParam("refresh_addr", qRefreshAddr); err != nil {
				return err
			}
		}

	}

	if o.RefreshTs != nil {

		// query param refresh_ts
		var qrRefreshTs string
		if o.RefreshTs != nil {
			qrRefreshTs = *o.RefreshTs
		}
		qRefreshTs := qrRefreshTs
		if qRefreshTs != "" {
			if err := r.SetQueryParam("refresh_ts", qRefreshTs); err != nil {
				return err
			}
		}

	}

	if o.Roles != nil {

		// query param roles
		var qrRoles string
		if o.Roles != nil {
			qrRoles = *o.Roles
		}
		qRoles := qrRoles
		if qRoles != "" {
			if err := r.SetQueryParam("roles", qRoles); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
