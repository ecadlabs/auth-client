// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewLogsGetParams creates a new LogsGetParams object
// with the default values initialized.
func NewLogsGetParams() *LogsGetParams {
	var (
		countDefault = bool(false)
		limitDefault = int32(20)
		orderDefault = string("asc")
	)
	return &LogsGetParams{
		Count: &countDefault,
		Limit: &limitDefault,
		Order: &orderDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewLogsGetParamsWithTimeout creates a new LogsGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLogsGetParamsWithTimeout(timeout time.Duration) *LogsGetParams {
	var (
		countDefault = bool(false)
		limitDefault = int32(20)
		orderDefault = string("asc")
	)
	return &LogsGetParams{
		Count: &countDefault,
		Limit: &limitDefault,
		Order: &orderDefault,

		timeout: timeout,
	}
}

// NewLogsGetParamsWithContext creates a new LogsGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewLogsGetParamsWithContext(ctx context.Context) *LogsGetParams {
	var (
		countDefault = bool(false)
		limitDefault = int32(20)
		orderDefault = string("asc")
	)
	return &LogsGetParams{
		Count: &countDefault,
		Limit: &limitDefault,
		Order: &orderDefault,

		Context: ctx,
	}
}

// NewLogsGetParamsWithHTTPClient creates a new LogsGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLogsGetParamsWithHTTPClient(client *http.Client) *LogsGetParams {
	var (
		countDefault = bool(false)
		limitDefault = int32(20)
		orderDefault = string("asc")
	)
	return &LogsGetParams{
		Count:      &countDefault,
		Limit:      &limitDefault,
		Order:      &orderDefault,
		HTTPClient: client,
	}
}

/*LogsGetParams contains all the parameters to send to the API endpoint
for the logs get operation typically these are written to a http.Request
*/
type LogsGetParams struct {

	/*Addr
	  Source address

	*/
	Addr *string
	/*Count
	  Return total count

	*/
	Count *bool
	/*Event
	  Event

	*/
	Event *string
	/*Last
	  Previews page last item's sorting field value

	*/
	Last *string
	/*LastID
	  Previews page last item's UID

	*/
	LastID *strfmt.UUID
	/*Limit
	  Page limit

	*/
	Limit *int32
	/*Order
	  Sort order

	*/
	Order *string
	/*SortBy
	  Sort by field

	*/
	SortBy *string
	/*TargetID
	  Target user ID (subject of operation)

	*/
	TargetID *string
	/*Ts
	  Log entry time stamp

	*/
	Ts *string
	/*UserID
	  Current user ID

	*/
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the logs get params
func (o *LogsGetParams) WithTimeout(timeout time.Duration) *LogsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the logs get params
func (o *LogsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the logs get params
func (o *LogsGetParams) WithContext(ctx context.Context) *LogsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the logs get params
func (o *LogsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the logs get params
func (o *LogsGetParams) WithHTTPClient(client *http.Client) *LogsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the logs get params
func (o *LogsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddr adds the addr to the logs get params
func (o *LogsGetParams) WithAddr(addr *string) *LogsGetParams {
	o.SetAddr(addr)
	return o
}

// SetAddr adds the addr to the logs get params
func (o *LogsGetParams) SetAddr(addr *string) {
	o.Addr = addr
}

// WithCount adds the count to the logs get params
func (o *LogsGetParams) WithCount(count *bool) *LogsGetParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the logs get params
func (o *LogsGetParams) SetCount(count *bool) {
	o.Count = count
}

// WithEvent adds the event to the logs get params
func (o *LogsGetParams) WithEvent(event *string) *LogsGetParams {
	o.SetEvent(event)
	return o
}

// SetEvent adds the event to the logs get params
func (o *LogsGetParams) SetEvent(event *string) {
	o.Event = event
}

// WithLast adds the last to the logs get params
func (o *LogsGetParams) WithLast(last *string) *LogsGetParams {
	o.SetLast(last)
	return o
}

// SetLast adds the last to the logs get params
func (o *LogsGetParams) SetLast(last *string) {
	o.Last = last
}

// WithLastID adds the lastID to the logs get params
func (o *LogsGetParams) WithLastID(lastID *strfmt.UUID) *LogsGetParams {
	o.SetLastID(lastID)
	return o
}

// SetLastID adds the lastId to the logs get params
func (o *LogsGetParams) SetLastID(lastID *strfmt.UUID) {
	o.LastID = lastID
}

// WithLimit adds the limit to the logs get params
func (o *LogsGetParams) WithLimit(limit *int32) *LogsGetParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the logs get params
func (o *LogsGetParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOrder adds the order to the logs get params
func (o *LogsGetParams) WithOrder(order *string) *LogsGetParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the logs get params
func (o *LogsGetParams) SetOrder(order *string) {
	o.Order = order
}

// WithSortBy adds the sortBy to the logs get params
func (o *LogsGetParams) WithSortBy(sortBy *string) *LogsGetParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the logs get params
func (o *LogsGetParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithTargetID adds the targetID to the logs get params
func (o *LogsGetParams) WithTargetID(targetID *string) *LogsGetParams {
	o.SetTargetID(targetID)
	return o
}

// SetTargetID adds the targetId to the logs get params
func (o *LogsGetParams) SetTargetID(targetID *string) {
	o.TargetID = targetID
}

// WithTs adds the ts to the logs get params
func (o *LogsGetParams) WithTs(ts *string) *LogsGetParams {
	o.SetTs(ts)
	return o
}

// SetTs adds the ts to the logs get params
func (o *LogsGetParams) SetTs(ts *string) {
	o.Ts = ts
}

// WithUserID adds the userID to the logs get params
func (o *LogsGetParams) WithUserID(userID *string) *LogsGetParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the logs get params
func (o *LogsGetParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *LogsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Addr != nil {

		// query param addr
		var qrAddr string
		if o.Addr != nil {
			qrAddr = *o.Addr
		}
		qAddr := qrAddr
		if qAddr != "" {
			if err := r.SetQueryParam("addr", qAddr); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount bool
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatBool(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Event != nil {

		// query param event
		var qrEvent string
		if o.Event != nil {
			qrEvent = *o.Event
		}
		qEvent := qrEvent
		if qEvent != "" {
			if err := r.SetQueryParam("event", qEvent); err != nil {
				return err
			}
		}

	}

	if o.Last != nil {

		// query param last
		var qrLast string
		if o.Last != nil {
			qrLast = *o.Last
		}
		qLast := qrLast
		if qLast != "" {
			if err := r.SetQueryParam("last", qLast); err != nil {
				return err
			}
		}

	}

	if o.LastID != nil {

		// query param lastId
		var qrLastID strfmt.UUID
		if o.LastID != nil {
			qrLastID = *o.LastID
		}
		qLastID := qrLastID.String()
		if qLastID != "" {
			if err := r.SetQueryParam("lastId", qLastID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Order != nil {

		// query param order
		var qrOrder string
		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {
			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if o.TargetID != nil {

		// query param target_id
		var qrTargetID string
		if o.TargetID != nil {
			qrTargetID = *o.TargetID
		}
		qTargetID := qrTargetID
		if qTargetID != "" {
			if err := r.SetQueryParam("target_id", qTargetID); err != nil {
				return err
			}
		}

	}

	if o.Ts != nil {

		// query param ts
		var qrTs string
		if o.Ts != nil {
			qrTs = *o.Ts
		}
		qTs := qrTs
		if qTs != "" {
			if err := r.SetQueryParam("ts", qTs); err != nil {
				return err
			}
		}

	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string
		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {
			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
